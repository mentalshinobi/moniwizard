import discord
from discord.ext import commands
import discum
import asyncio
import threading
import json
from datetime import datetime
import requests
from io import BytesIO
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "user_token": os.getenv("USER_TOKEN", "1"),
    "bot_token": os.getenv("BOT_TOKEN", "1"),
    "source_server_id": os.getenv("SOURCE_SERVER_ID", "1131000554005467206"),
    "target_server_id": int(os.getenv("TARGET_SERVER_ID", "1382453417754231028")),
    "channel_mapping": {
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤: –∏—Å—Ö–æ–¥–Ω—ã–π_–∫–∞–Ω–∞–ª_id: —Ü–µ–ª–µ–≤–æ–π_–∫–∞–Ω–∞–ª_id
        "1213700486302146650": 1400863423746674698,
        "1131011652062564413": 1400863591552520192,
    },
    "webhook_name": "Mirror Bot",
    "include_attachments": True,
    "include_embeds": True,
    "filter_bots": True,
    "prefix_format": "",  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    "log_messages": True,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    "debug_avatars": False,  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö
}

class DiscordMirror:
    def __init__(self):
        # Discum client –¥–ª—è user token (—á—Ç–µ–Ω–∏–µ)
        self.user_client = None
        
        # Discord.py bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.bot = self.create_bot()
        
        # –ö–µ—à –¥–ª—è webhooks
        self.webhook_cache = {}
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.user_ready = False
        self.bot_ready = False
    
    def create_bot(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Discord.py –±–æ—Ç–∞"""
        intents = discord.Intents.default()
        intents.message_content = True
        intents.guilds = True
        intents.webhooks = True
        
        bot = commands.Bot(command_prefix='!mirror_', intents=intents)
        
        @bot.event
        async def on_ready():
            print(f'ü§ñ Bot –≥–æ—Ç–æ–≤: {bot.user}')
            target_guild = bot.get_guild(CONFIG["target_server_id"])
            if target_guild:
                print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É: {target_guild.name}')
                self.bot_ready = True
            else:
                print(f'‚ùå –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG["target_server_id"]}')
        
        return bot
    
    def setup_user_client(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discum –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.user_client = discum.Client(token=CONFIG["user_token"], log=False)
            
            @self.user_client.gateway.command
            def on_ready(resp):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
                if resp.event.ready:
                    if not self.user_ready:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ä–µ—Å–ø–æ–Ω—Å–∞
                        user_data = resp.parsed.auto()
                        if 'user' in user_data:
                            user_info = user_data['user']
                            username = user_info.get('username', 'Unknown')
                            discriminator = user_info.get('discriminator', '0000')
                            print(f'üë§ User client –≥–æ—Ç–æ–≤: {username}#{discriminator}')
                        else:
                            print(f'üë§ User client –≥–æ—Ç–æ–≤')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                        try:
                            guilds = self.user_client.getGuilds().json()
                            source_guild = None
                            for guild in guilds:
                                if str(guild["id"]) == str(CONFIG["source_server_id"]):
                                    source_guild = guild
                                    break
                            
                            if source_guild:
                                print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É: {source_guild["name"]}')
                                self.user_ready = True
                            else:
                                print(f'‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG["source_server_id"]}')
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
                            self.user_ready = True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            
            @self.user_client.gateway.command
            def on_message(resp):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
                if resp.event.message:
                    try:
                        message = resp.parsed.auto()
                        if self.should_mirror_message(message):
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            asyncio.run_coroutine_threadsafe(
                                self.mirror_message(message), 
                                self.bot.loop
                            )
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ user client: {e}")
            return False
    
    def should_mirror_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message or (not message.get('content') and not message.get('attachments')):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
            guild_id = str(message.get('guild_id', ''))
            if guild_id != str(CONFIG["source_server_id"]):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
            channel_id = str(message.get('channel_id', ''))
            if channel_id not in CONFIG["channel_mapping"]:
                return False
            
            # –§–∏–ª—å—Ç—Ä –±–æ—Ç–æ–≤
            author = message.get('author', {})
            if CONFIG["filter_bots"] and author.get('bot', False):
                return False
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            try:
                if hasattr(self.user_client, 'user') and self.user_client.user:
                    user_id = self.user_client.user.get('id')
                    if author.get('id') == user_id:
                        return False
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def mirror_message(self, message):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ bot"""
        try:
            channel_id = str(message.get('channel_id', ''))
            target_channel_id = CONFIG["channel_mapping"].get(channel_id)
            
            if not target_channel_id:
                return
            
            target_channel = self.bot.get_channel(target_channel_id)
            if not target_channel:
                print(f"‚ùå –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_channel_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º webhook
            webhook = await self.get_or_create_webhook(target_channel)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            author = message.get('author', {})
            content = CONFIG["prefix_format"] + (message.get('content', '') or '')
            
            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(content) > 2000:
                content = content[:1997] + "..."
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ embeds
            embeds = []
            if CONFIG["include_embeds"] and message.get('embeds'):
                embeds = [discord.Embed.from_dict(embed) for embed in message['embeds'][:10]]
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
            files = []
            if CONFIG["include_attachments"] and message.get('attachments'):
                files = await self.download_attachments(message['attachments'])
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
            if CONFIG["debug_avatars"]:
                print(f"üîç –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")
                print(f"   ID: {author.get('id')}")
                print(f"   Username: {author.get('username')}")
                print(f"   Global name: {author.get('global_name')}")
                print(f"   Avatar ID: {author.get('avatar')}")
                print(f"   Discriminator: {author.get('discriminator')}")
            
            if webhook:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ webhook (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∞–≤–∞—Ç–∞—Ä)
                author_id = author.get('id')
                avatar_id = author.get('avatar')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞
                avatar_url = None
                if avatar_id and author_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤–∞—Ç–∞—Ä –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (GIF)
                    if avatar_id.startswith('a_'):
                        avatar_url = f"https://cdn.discordapp.com/avatars/{author_id}/{avatar_id}.gif"
                    else:
                        avatar_url = f"https://cdn.discordapp.com/avatars/{author_id}/{avatar_id}.png"
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                    if author_id:
                        # Discord –∏—Å–ø–æ–ª—å–∑—É–µ—Ç discriminator –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
                        discriminator = author.get('discriminator', '0000')
                        if discriminator == '0' or discriminator == '0000':
                            # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ username (–±–µ–∑ discriminator)
                            default_avatar = int(author_id) % 5
                        else:
                            # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å discriminator
                            default_avatar = int(discriminator) % 5
                        avatar_url = f"https://cdn.discordapp.com/embed/avatars/{default_avatar}.png"
                
                # –ü–æ–ª—É—á–∞–µ–º display_name (nickname –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
                username = author.get('global_name') or author.get('username', 'Unknown')
                
                await webhook.send(
                    content=content if content.strip() else None,
                    username=username[:80],  # Discord –ª–∏–º–∏—Ç –Ω–∞ –∏–º—è
                    avatar_url=avatar_url,
                    embeds=embeds,
                    files=files,
                    wait=False
                )
                
                if CONFIG["log_messages"]:
                    print(f"üì§ Webhook: {username} | Avatar: {'‚úÖ' if avatar_url else '‚ùå'}")
            else:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                await self.send_as_bot_message(target_channel, message, files)
            
            if CONFIG["log_messages"]:
                try:
                    source_channel_info = self.user_client.getChannel(channel_id).json()
                    source_channel_name = source_channel_info.get('name', 'unknown')
                except:
                    source_channel_name = 'unknown'
                
                print(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ: {author.get('username', 'Unknown')} | #{source_channel_name} -> #{target_channel.name}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
            import traceback
            traceback.print_exc()
    
    async def get_or_create_webhook(self, channel):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å webhook"""
        if channel.id in self.webhook_cache:
            webhook = self.webhook_cache[channel.id]
            try:
                await webhook.fetch()
                return webhook
            except (discord.NotFound, discord.HTTPException):
                del self.webhook_cache[channel.id]
        
        try:
            webhooks = await channel.webhooks()
            webhook = discord.utils.get(webhooks, name=CONFIG["webhook_name"])
            
            if not webhook:
                webhook = await channel.create_webhook(name=CONFIG["webhook_name"])
                print(f"üîó –°–æ–∑–¥–∞–Ω webhook –≤ #{channel.name}")
            
            self.webhook_cache[channel.id] = webhook
            return webhook
            
        except discord.Forbidden:
            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è webhook –≤ #{channel.name}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
            return None
    
    async def send_as_bot_message(self, channel, original_message, files):
        """Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            author = original_message.get('author', {})
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                source_channel_info = self.user_client.getChannel(str(original_message.get('channel_id', ''))).json()
                source_channel_name = source_channel_info.get('name', 'unknown')
            except:
                source_channel_name = 'unknown'
            
            content = f"**{author.get('username', 'Unknown')}** (–∏–∑ #{source_channel_name}):\n"
            content += CONFIG["prefix_format"] + (original_message.get('content') or "*—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞*")
            
            if len(content) > 2000:
                content = content[:1997] + "..."
            
            await channel.send(content, files=files)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def download_attachments(self, attachments):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π"""
        files = []
        for attachment in attachments[:10]:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                if attachment.get('size', 0) > 8 * 1024 * 1024:  # 8MB –ª–∏–º–∏—Ç
                    print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {attachment.get('filename')}")
                    continue
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                response = requests.get(attachment['url'])
                if response.status_code == 200:
                    file_data = BytesIO(response.content)
                    files.append(discord.File(
                        fp=file_data,
                        filename=attachment.get('filename', 'unknown')
                    ))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {attachment.get('filename')}: {e}")
        
        return files
    
    def add_bot_commands(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        @self.bot.command(name='status')
        @commands.has_permissions(administrator=True)
        async def status(ctx):
            embed = discord.Embed(title="üìä Mirror Status", color=0x00ff00)
            
            user_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if self.user_ready else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            bot_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if self.bot_ready else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            
            embed.add_field(name="User Client", value=user_status, inline=True)
            embed.add_field(name="Bot Client", value=bot_status, inline=True)
            embed.add_field(name="–ú–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤", value=len(CONFIG["channel_mapping"]), inline=True)
            
            await ctx.send(embed=embed)
        
        @self.bot.command(name='add')
        @commands.has_permissions(administrator=True)
        async def add_mapping(ctx, source_id: str, target_id: int):
            CONFIG["channel_mapping"][source_id] = target_id
            await ctx.send(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥: <#{source_id}> -> <#{target_id}>")
        
        @self.bot.command(name='remove')
        @commands.has_permissions(administrator=True)
        async def remove_mapping(ctx, source_id: str):
            if source_id in CONFIG["channel_mapping"]:
                target_id = CONFIG["channel_mapping"].pop(source_id)
                await ctx.send(f"‚úÖ –£–¥–∞–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥: <#{source_id}> -> <#{target_id}>")
            else:
                await ctx.send("‚ùå –ú–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        @self.bot.command(name='list')
        @commands.has_permissions(administrator=True)
        async def list_mappings(ctx):
            if not CONFIG["channel_mapping"]:
                await ctx.send("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤")
                return
            
            embed = discord.Embed(title="üìù –ú–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤", color=0x0099ff)
            for source_id, target_id in CONFIG["channel_mapping"].items():
                embed.add_field(
                    name=f"<#{source_id}>",
                    value=f"-> <#{target_id}>",
                    inline=False
                )
            await ctx.send(embed=embed)
        
        @self.bot.command(name='test_webhook')
        @commands.has_permissions(administrator=True)
        async def test_webhook(ctx):
            """–¢–µ—Å—Ç webhook —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
            try:
                webhook = await self.get_or_create_webhook(ctx.channel)
                if webhook:
                    await webhook.send(
                        content="üß™ –¢–µ—Å—Ç webhook —Å –∞vat–∞—Ä–æ–º!",
                        username="Test User",
                        avatar_url="https://cdn.discordapp.com/embed/avatars/0.png"
                    )
                    await ctx.send("‚úÖ Webhook —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å webhook")
            except Exception as e:
                await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    def run_user_client(self):
        """–ó–∞–ø—É—Å–∫ user client –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            print("üîÑ Connecting user client...")
            self.user_client.gateway.run(auto_reconnect=True)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ user client: {e}")
            import traceback
            traceback.print_exc()
    
    async def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Discord Mirror (Discum + Discord.py)...")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ user token –Ω–∞—Ä—É—à–∞–µ—Ç ToS Discord!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
        if CONFIG["user_token"] == "YOUR_USER_TOKEN_HERE":
            print("‚ùå –£–∫–∞–∂–∏ user_token –≤ CONFIG!")
            return
        
        if CONFIG["bot_token"] == "YOUR_BOT_TOKEN_HERE":
            print("‚ùå –£–∫–∞–∂–∏ bot_token –≤ CONFIG!")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º user client
        print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ user client...")
        if not self.setup_user_client():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å user client!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫ –±–æ—Ç—É
        self.add_bot_commands()
        
        print("üîÑ –ó–∞–ø—É—Å–∫ user client...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º user client –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        user_thread = threading.Thread(target=self.run_user_client, daemon=True)
        user_thread.start()
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ user client
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ user client...")
        await asyncio.sleep(5)
        
        print("üîÑ –ó–∞–ø—É—Å–∫ bot client...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            await self.bot.start(CONFIG["bot_token"])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
mirror = DiscordMirror()

async def main():
    try:
        await mirror.run()
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if mirror.user_client:
            mirror.user_client.gateway.close()
        if mirror.bot:
            await mirror.bot.close()

if __name__ == "__main__":
    asyncio.run(main())